{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\smart-grocery-react-test\\\\src\\\\GroceryListTab.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroceryListTab = ({\n  selectedMeals,\n  pantryItems,\n  showMessage\n}) => {\n  _s();\n  //const [selectedMeals, setSelectedMeals] = useState([]);\n  //const [pantryItems, setPantryItems] = useState([]);\n  const [categorizedList, setCategorizedList] = useState({});\n  const [optimizationSuggestions, setOptimizationSuggestions] = useState([]);\n  useEffect(() => {\n    // In a real app, you would get these from context or props\n    const savedMeals = JSON.parse(localStorage.getItem('selectedMeals')) || [];\n    const savedPantry = JSON.parse(localStorage.getItem('pantryItems')) || [];\n    setSelectedMeals(savedMeals);\n    setPantryItems(savedPantry);\n  }, []);\n  useEffect(() => {\n    if (selectedMeals.length > 0) {\n      generateGroceryList();\n    }\n  }, [selectedMeals, pantryItems]);\n  const normalizeIngredientName = name => {\n    return name.toLowerCase().replace(/s$/, '').replace(/(\\s*(diced|chopped|sliced|fresh|canned|dried|ground))\\s*/g, '');\n  };\n  const capitalizeWords = str => {\n    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n  const generateGroceryList = () => {\n    const combinedIngredients = new Map();\n    const missingIngredients = new Set();\n    selectedMeals.forEach(({\n      recipe,\n      servings: desiredServings\n    }) => {\n      const scalingFactor = desiredServings / recipe.servings;\n      recipe.ingredients.forEach(ingredient => {\n        const normalizedItem = normalizeIngredientName(ingredient.item);\n        const scaledQuantity = ingredient.quantity * scalingFactor;\n        if (!pantryItems.includes(normalizedItem)) {\n          missingIngredients.add(normalizedItem);\n        }\n        if (combinedIngredients.has(normalizedItem)) {\n          const existing = combinedIngredients.get(normalizedItem);\n          existing.quantity += scaledQuantity;\n        } else {\n          combinedIngredients.set(normalizedItem, {\n            item: ingredient.item,\n            quantity: scaledQuantity,\n            unit: ingredient.unit,\n            category: ingredient.category || 'Miscellaneous'\n          });\n        }\n      });\n    });\n    const categorized = {};\n    combinedIngredients.forEach(ing => {\n      if (!pantryItems.includes(normalizeIngredientName(ing.item))) {\n        const category = ing.category;\n        if (!categorized[category]) {\n          categorized[category] = [];\n        }\n        categorized[category].push(ing);\n      }\n    });\n    setCategorizedList(categorized);\n    generateOptimizationSuggestions(categorized, missingIngredients);\n  };\n  const generateOptimizationSuggestions = (categorizedList, missingIngredients) => {\n    const suggestions = [];\n\n    // Suggest using pantry items that might be less common or have specific uses\n    const suggestedPantryUses = ['Parmesan cheese', 'Canned diced tomatoes', 'Olive oil', 'Garlic'];\n    pantryItems.forEach(item => {\n      if (suggestedPantryUses.includes(capitalizeWords(item))) {\n        suggestions.push(`Consider using your existing ${capitalizeWords(item)} in other recipes this week.`);\n      }\n    });\n\n    // Check for unused pantry items\n    if (pantryItems.length > 0 && selectedMeals.length > 0) {\n      const allRecipeIngredients = new Set();\n      selectedMeals.forEach(({\n        recipe\n      }) => {\n        recipe.ingredients.forEach(ing => allRecipeIngredients.add(normalizeIngredientName(ing.item)));\n      });\n      pantryItems.forEach(pantryItem => {\n        if (!allRecipeIngredients.has(pantryItem)) {\n          suggestions.push(`You have ${capitalizeWords(pantryItem)} in your pantry that wasn't used in your selected meals. Can you find another use for it?`);\n        }\n      });\n    }\n    setOptimizationSuggestions(suggestions);\n  };\n  const sortedCategories = Object.keys(categorizedList).sort();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"grocery-list-content\",\n    className: \"tab-content\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"groceryListSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold text-gray-900 text-center mb-8\",\n        children: \"Your Smart Grocery List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"groceryList\",\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-8\",\n        children: sortedCategories.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-center col-span-full\",\n          children: selectedMeals.length === 0 ? 'Select meals on the \"Meal Plan & Pantry\" tab to generate your grocery list.' : 'All ingredients for your selected meals are already in your pantry!'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this) : sortedCategories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-bold text-gray-800 mb-4 border-b pb-2\",\n            children: category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-5 text-gray-700\",\n            children: categorizedList[category].sort((a, b) => a.item.localeCompare(b.item)).map((ing, index) => {\n              const displayQuantity = ing.quantity % 1 === 0 ? ing.quantity : ing.quantity.toFixed(1);\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [displayQuantity, \" \", ing.unit ? ing.unit + ' ' : '', capitalizeWords(ing.item)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 25\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), optimizationSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"wasteOptimizationSuggestions\",\n        className: \"mt-10 p-6 bg-yellow-50 rounded-xl shadow-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-2xl font-bold text-yellow-800 mb-4\",\n          children: \"Waste Optimization Suggestions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"optimizationList\",\n          className: \"list-disc list-inside text-gray-700\",\n          children: optimizationSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: suggestion\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(GroceryListTab, \"mqYGVtFpk9YQAOem2L6kInwBjYw=\");\n_c = GroceryListTab;\nexport default GroceryListTab;\nvar _c;\n$RefreshReg$(_c, \"GroceryListTab\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GroceryListTab","selectedMeals","pantryItems","showMessage","_s","categorizedList","setCategorizedList","optimizationSuggestions","setOptimizationSuggestions","savedMeals","JSON","parse","localStorage","getItem","savedPantry","setSelectedMeals","setPantryItems","length","generateGroceryList","normalizeIngredientName","name","toLowerCase","replace","capitalizeWords","str","split","map","word","charAt","toUpperCase","slice","join","combinedIngredients","Map","missingIngredients","Set","forEach","recipe","servings","desiredServings","scalingFactor","ingredients","ingredient","normalizedItem","item","scaledQuantity","quantity","includes","add","has","existing","get","set","unit","category","categorized","ing","push","generateOptimizationSuggestions","suggestions","suggestedPantryUses","allRecipeIngredients","pantryItem","sortedCategories","Object","keys","sort","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","a","b","localeCompare","index","displayQuantity","toFixed","suggestion","_c","$RefreshReg$"],"sources":["C:/Users/Owner/smart-grocery-react-test/src/GroceryListTab.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst GroceryListTab = ({ \r\n  selectedMeals,\r\n  pantryItems,\r\n  showMessage\r\n}) => {\r\n  //const [selectedMeals, setSelectedMeals] = useState([]);\r\n  //const [pantryItems, setPantryItems] = useState([]);\r\n  const [categorizedList, setCategorizedList] = useState({});\r\n  const [optimizationSuggestions, setOptimizationSuggestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // In a real app, you would get these from context or props\r\n    const savedMeals = JSON.parse(localStorage.getItem('selectedMeals')) || [];\r\n    const savedPantry = JSON.parse(localStorage.getItem('pantryItems')) || [];\r\n    setSelectedMeals(savedMeals);\r\n    setPantryItems(savedPantry);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedMeals.length > 0) {\r\n      generateGroceryList();\r\n    }\r\n  }, [selectedMeals, pantryItems]);\r\n\r\n  const normalizeIngredientName = (name) => {\r\n    return name.toLowerCase()\r\n      .replace(/s$/, '')\r\n      .replace(/(\\s*(diced|chopped|sliced|fresh|canned|dried|ground))\\s*/g, '');\r\n  };\r\n\r\n  const capitalizeWords = (str) => {\r\n    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\r\n  };\r\n\r\n  const generateGroceryList = () => {\r\n    const combinedIngredients = new Map();\r\n    const missingIngredients = new Set();\r\n\r\n    selectedMeals.forEach(({ recipe, servings: desiredServings }) => {\r\n      const scalingFactor = desiredServings / recipe.servings;\r\n\r\n      recipe.ingredients.forEach(ingredient => {\r\n        const normalizedItem = normalizeIngredientName(ingredient.item);\r\n        const scaledQuantity = ingredient.quantity * scalingFactor;\r\n\r\n        if (!pantryItems.includes(normalizedItem)) {\r\n          missingIngredients.add(normalizedItem);\r\n        }\r\n\r\n        if (combinedIngredients.has(normalizedItem)) {\r\n          const existing = combinedIngredients.get(normalizedItem);\r\n          existing.quantity += scaledQuantity;\r\n        } else {\r\n          combinedIngredients.set(normalizedItem, {\r\n            item: ingredient.item,\r\n            quantity: scaledQuantity,\r\n            unit: ingredient.unit,\r\n            category: ingredient.category || 'Miscellaneous'\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    const categorized = {};\r\n    combinedIngredients.forEach(ing => {\r\n      if (!pantryItems.includes(normalizeIngredientName(ing.item))) {\r\n        const category = ing.category;\r\n        if (!categorized[category]) {\r\n          categorized[category] = [];\r\n        }\r\n        categorized[category].push(ing);\r\n      }\r\n    });\r\n\r\n    setCategorizedList(categorized);\r\n    generateOptimizationSuggestions(categorized, missingIngredients);\r\n  };\r\n\r\n  const generateOptimizationSuggestions = (categorizedList, missingIngredients) => {\r\n    const suggestions = [];\r\n\r\n    // Suggest using pantry items that might be less common or have specific uses\r\n    const suggestedPantryUses = [\r\n      'Parmesan cheese', 'Canned diced tomatoes', 'Olive oil', 'Garlic'\r\n    ];\r\n\r\n    pantryItems.forEach(item => {\r\n      if (suggestedPantryUses.includes(capitalizeWords(item))) {\r\n        suggestions.push(`Consider using your existing ${capitalizeWords(item)} in other recipes this week.`);\r\n      }\r\n    });\r\n\r\n    // Check for unused pantry items\r\n    if (pantryItems.length > 0 && selectedMeals.length > 0) {\r\n      const allRecipeIngredients = new Set();\r\n      selectedMeals.forEach(({ recipe }) => {\r\n        recipe.ingredients.forEach(ing => allRecipeIngredients.add(normalizeIngredientName(ing.item)));\r\n      });\r\n\r\n      pantryItems.forEach(pantryItem => {\r\n        if (!allRecipeIngredients.has(pantryItem)) {\r\n          suggestions.push(`You have ${capitalizeWords(pantryItem)} in your pantry that wasn't used in your selected meals. Can you find another use for it?`);\r\n        }\r\n      });\r\n    }\r\n\r\n    setOptimizationSuggestions(suggestions);\r\n  };\r\n\r\n  const sortedCategories = Object.keys(categorizedList).sort();\r\n\r\n  return (\r\n    <div id=\"grocery-list-content\" className=\"tab-content\">\r\n      <section id=\"groceryListSection\">\r\n        <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-8\">Your Smart Grocery List</h2>\r\n        <div id=\"groceryList\" className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\r\n          {sortedCategories.length === 0 ? (\r\n            <p className=\"text-gray-500 text-center col-span-full\">\r\n              {selectedMeals.length === 0 \r\n                ? 'Select meals on the \"Meal Plan & Pantry\" tab to generate your grocery list.'\r\n                : 'All ingredients for your selected meals are already in your pantry!'}\r\n            </p>\r\n          ) : (\r\n            sortedCategories.map(category => (\r\n              <div key={category} className=\"card p-6\">\r\n                <h3 className=\"text-xl font-bold text-gray-800 mb-4 border-b pb-2\">{category}</h3>\r\n                <ul className=\"list-disc pl-5 text-gray-700\">\r\n                  {categorizedList[category]\r\n                    .sort((a, b) => a.item.localeCompare(b.item))\r\n                    .map((ing, index) => {\r\n                      const displayQuantity = (ing.quantity % 1 === 0) ? ing.quantity : ing.quantity.toFixed(1);\r\n                      return (\r\n                        <li key={index}>\r\n                          {displayQuantity} {ing.unit ? ing.unit + ' ' : ''}{capitalizeWords(ing.item)}\r\n                        </li>\r\n                      );\r\n                    })}\r\n                </ul>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n\r\n        {optimizationSuggestions.length > 0 && (\r\n          <div id=\"wasteOptimizationSuggestions\" className=\"mt-10 p-6 bg-yellow-50 rounded-xl shadow-inner\">\r\n            <h3 className=\"text-2xl font-bold text-yellow-800 mb-4\">Waste Optimization Suggestions:</h3>\r\n            <ul id=\"optimizationList\" className=\"list-disc list-inside text-gray-700\">\r\n              {optimizationSuggestions.map((suggestion, index) => (\r\n                <li key={index}>{suggestion}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroceryListTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}